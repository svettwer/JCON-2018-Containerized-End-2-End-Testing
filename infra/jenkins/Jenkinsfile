stage('dev') {
    node{
        checkout scm
        openshift.withCluster() {
            openshift.withProject( "todo-app-dev" ) {
                buildTodoApp()
                deployTodoApp("todo-app-dev.192.168.99.110.nip.io")

                openshift.tag("todo-app-dev/todo-app:latest todo-app-int/todo-app:latest")
            }
        }
    }
}

node{
    checkout scm
    openshift.withCluster() {
        openshift.withProject( "todo-app-int" ) {

            stage('build-e2e-test-containers'){
                def checkLayoutBuild = startE2ETestBuild('check-layout','e2e/layout')
                def checkLifeCycle = startE2ETestBuild('check-life-cycle','e2e/lifeCycle')
                waitForBuild(checkLayoutBuild)
                waitForBuild(checkLifeCycle)
            }

            stage('deploy-to-int'){
                deployTodoApp("todo-app-int.192.168.99.110.nip.io")
            }

            stage('run-e2e-tests'){
                deletePod('check-layout')
                deletePod('check-life-cycle')
                startE2ETest('check-layout')
                startE2ETest('check-life-cycle')
                waitForTest(openshift.selector('po/check-layout'))
                waitForTest(openshift.selector('po/check-life-cycle'))
            }

            openshift.tag("todo-app-int/todo-app:latest todo-app-prod/todo-app:latest")
        }
    }
}

stage('prod') {
    node{
        openshift.withCluster() {
            openshift.withProject( "todo-app-prod" ) {
                deployTodoApp("todo-app-prod.192.168.99.110.nip.io")
            }
        }
    }
}

private void buildTodoApp() {
    def buildTemplate = openshift.process("-f", "infra/yml/s2i-todo-app-build-template.yml")
    openshift.apply(buildTemplate)

    openshift.startBuild("todo-app", "--wait=true")
}

private void deployTodoApp(String routeUrl) {
    def deploymentTemplate = openshift.process("-f", "infra/yml/todo-app-deployment-template.yml",
            "-p", "URL=" + routeUrl)
    openshift.apply(deploymentTemplate)

    openshift.selector("dc/todo-app").rollout().latest()
    openshift.selector("dc/todo-app").rollout().status("--watch=true")
}


private Object startE2ETestBuild(def buildName, def contextDir) {
    def buildTemplate = openshift.process("-f", "infra/yml/s2i-sakuli-build-template.yml",
            "-p", "IMAGE=" + buildName,
            "-p", "TESTSUITE_REPOSITORY_URL=http://gogs.192.168.99.110.nip.io/sven/todo-app.git",
            "-p", "TESTSUITE_CONTEXT_DIR="+ contextDir)
    openshift.apply(buildTemplate)
    return openshift.startBuild(buildName)
}

private void startE2ETest(def testName) {
    openshift.run(testName,
            "--image=172.30.1.1:5000/todo-app-int/"+ testName + ":latest",
            "--restart=Never",
            "-l application="+testName)
}


private void deletePod(def podName){
    def pod = openshift.selector("po/"+podName)
    if(pod.exists()){
        pod.delete()
    }
}

private static void waitForBuild(def selector){
    selector.watch {
        if ( it.count() == 0 ) return false

        def allDone = true
        it.withEach {
            def model = it.object()
            if ( model.status.phase != "Complete") {
                allDone = false
            }
        }

        return allDone
    }
}

private static void waitForTest(def selector){
    selector.watch {
        if ( it.count() == 0 ) return false

        def allDone = true
        it.withEach {
            def model = it.object()
            if ( model.status.phase == "Running") {
                allDone = false
            }
        }

        return allDone
    }
}